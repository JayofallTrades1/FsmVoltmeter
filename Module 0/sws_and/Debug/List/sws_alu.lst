###############################################################################
#
# IAR C/C++ Compiler V6.50.2.806 for Atmel AVR            10/Feb/2015  19:52:04
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench 4K Kickstart edition for Atmel AVR 6.50
#
#    Source file  =  C:\Users\Jay\Documents\Projects\Module 0\sws_and\sws_alu.c
#    Command line =  
#        "C:\Users\Jay\Documents\Projects\Module 0\sws_and\sws_alu.c"
#        --cpu=m128 -ms -o "C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\Obj\" -lCN "C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\List\" -y --initializers_in_flash --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e --eeprom_size 4096 --clib -On
#    List file    =  
#        C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\List\sws_alu.lst
#    Object file  =  
#        C:\Users\Jay\Documents\Projects\Module 0\sws_and\Debug\Obj\sws_alu.r90
#
###############################################################################

C:\Users\Jay\Documents\Projects\Module 0\sws_and\sws_alu.c
      1          /*
      2          Name: Suphasith Usdonvudhikai 109219981
      3          Class: ESE 381 Lab Sec 01 
      4          Module 0
      5          File: sws_alu.c
      6          Description: implement a mode logical calculator.
      7            Inputs: 8-bit switches; PD7-PD6 are used for mode selections; Outputs: LED bargraph shows calculations
      8            00 -> AND; 01 -> OR; 10 -> EXOR; 11 -> complement
      9          */
     10          
     11          #include <iom128.h>

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
     12          
     13          union  
     14          {
     15            unsigned char byteimage;
     16            struct bitimage 
     17            {
     18              unsigned char imbit0:1,
     19                            imbit1:1,
     20                            imbit2:1,
     21                            imbit3:1,
     22                            imbit4:1,
     23                            imbit5:1,
     24                            imbit6:1,
     25                            imbit7:1;
     26            } temp;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27          };
   \                     _A_byteimage:
   \   00000000                      DS8 1
     28          

   \                                 In  segment CODE, align 2, keep-with-next
     29          int main(void)
   \                     main:
     30          {
     31            
     32            DDRD = 0x00;                          //setup PORTD as inputs     
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB01               OUT     0x11, R16
     33            PORTD = 0xFF;                         //turn on pull-ups for PORTD
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB02               OUT     0x12, R16
     34            DDRB = 0xFF;                          //setup PORTB as outputs
   \   00000008   EF0F               LDI     R16, 255
   \   0000000A   BB07               OUT     0x17, R16
     35            
     36            while(1)
     37            {
     38              byteimage = PIND;
   \                     ??main_0:
   \   0000000C   B300               IN      R16, 0x10
   \   0000000E   9300....           STS     _A_byteimage, R16
     39              
     40              if(temp.imbit7 == 0 && temp.imbit6 == 0)
   \   00000012   9100....           LDS     R16, _A_byteimage
   \   00000016   7C00               ANDI    R16, 0xC0
   \   00000018   2300               TST     R16
   \   0000001A   F459               BRNE    ??main_1
     41              {
     42                unsigned char temp = byteimage >> 5;
   \   0000001C   9100....           LDS     R16, _A_byteimage
   \   00000020   9502               SWAP    R16
   \   00000022   700F               ANDI    R16, 0x0F
   \   00000024   9506               LSR     R16
     43                temp = byteimage & temp;
   \   00000026   9110....           LDS     R17, _A_byteimage
   \   0000002A   2301               AND     R16, R17
     44                PORTB = ~temp;
   \   0000002C   9500               COM     R16
   \   0000002E   BB08               OUT     0x18, R16
   \   00000030   CFED               RJMP    ??main_0
     45              }
     46              else if(temp.imbit7 == 0 && temp.imbit6 == 1)
   \                     ??main_1:
   \   00000032   9100....           LDS     R16, _A_byteimage
   \   00000036   7C00               ANDI    R16, 0xC0
   \   00000038   3400               CPI     R16, 64
   \   0000003A   F461               BRNE    ??main_2
     47              {
     48                unsigned char temp = byteimage >> 5;
   \   0000003C   9100....           LDS     R16, _A_byteimage
   \   00000040   9502               SWAP    R16
   \   00000042   700F               ANDI    R16, 0x0F
   \   00000044   9506               LSR     R16
     49                temp = byteimage | temp;
   \   00000046   9110....           LDS     R17, _A_byteimage
   \   0000004A   2B01               OR      R16, R17
     50                temp &= 0x07;
   \   0000004C   7007               ANDI    R16, 0x07
     51                PORTB = ~temp;
   \   0000004E   9500               COM     R16
   \   00000050   BB08               OUT     0x18, R16
   \   00000052   CFDC               RJMP    ??main_0
     52              }
     53              else if(temp.imbit7 == 1 && temp.imbit6 == 0)
   \                     ??main_2:
   \   00000054   9100....           LDS     R16, _A_byteimage
   \   00000058   7C00               ANDI    R16, 0xC0
   \   0000005A   3800               CPI     R16, 128
   \   0000005C   F461               BRNE    ??main_3
     54              {
     55                unsigned char temp = byteimage >> 5;
   \   0000005E   9100....           LDS     R16, _A_byteimage
   \   00000062   9502               SWAP    R16
   \   00000064   700F               ANDI    R16, 0x0F
   \   00000066   9506               LSR     R16
     56                temp = byteimage ^ temp;
   \   00000068   9110....           LDS     R17, _A_byteimage
   \   0000006C   2701               EOR     R16, R17
     57                temp &= 0x07;
   \   0000006E   7007               ANDI    R16, 0x07
     58                PORTB = ~temp;
   \   00000070   9500               COM     R16
   \   00000072   BB08               OUT     0x18, R16
   \   00000074   CFCB               RJMP    ??main_0
     59              }
     60              else
     61              {
     62                byteimage &= 0x07;
   \                     ??main_3:
   \   00000076   9100....           LDS     R16, _A_byteimage
   \   0000007A   7007               ANDI    R16, 0x07
   \   0000007C   9300....           STS     _A_byteimage, R16
     63                PORTB = ~byteimage;
   \   00000080   9100....           LDS     R16, _A_byteimage
   \   00000084   9500               COM     R16
   \   00000086   BB08               OUT     0x18, R16
   \   00000088   CFC1               RJMP    ??main_0
   \   0000008A                      REQUIRE _A_DDRD
   \   0000008A                      REQUIRE _A_PORTD
   \   0000008A                      REQUIRE _A_DDRB
   \   0000008A                      REQUIRE _A_PIND
   \   0000008A                      REQUIRE _A_PORTB
     64              }
     65            }
     66          }

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRB
       1  _A_DDRD
       1  _A_PIND
       1  _A_PORTB
       1  _A_PORTD
       1  _A_byteimage
     138  main
       7  -- Other

 
   5 bytes in segment ABSOLUTE
 138 bytes in segment CODE
   7 bytes in segment INITTAB
   1 byte  in segment NEAR_Z
 
 138 bytes of CODE memory (+ 7 bytes shared)
   1 byte  of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none

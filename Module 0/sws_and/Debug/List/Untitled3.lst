###############################################################################
#
# IAR C/C++ Compiler V6.50.2.806 for Atmel AVR            11/Feb/2015  00:55:36
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench 4K Kickstart edition for Atmel AVR 6.50
#
#    Source file  =  
#        C:\Users\Jay\Documents\Projects\Module 0\sws_and\Untitled3.c
#    Command line =  
#        "C:\Users\Jay\Documents\Projects\Module 0\sws_and\Untitled3.c"
#        --cpu=m128 -ms -o "C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\Obj\" -lCN "C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\List\" -y --initializers_in_flash --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e --eeprom_size 4096 --clib -On
#    List file    =  
#        C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\List\Untitled3.lst
#    Object file  =  
#        C:\Users\Jay\Documents\Projects\Module
#        0\sws_and\Debug\Obj\Untitled3.r90
#
###############################################################################

C:\Users\Jay\Documents\Projects\Module 0\sws_and\Untitled3.c
      1          /*
      2          Name: Suphasith Usdonvudhikai 109219981
      3          Class: ESE 381 Lab Sec 01 
      4          Module 0
      5          File: sws_alu.c
      6          Description: implement a mode logical calculator.
      7            Inputs: 8-bit switches; PD7-PD6 are used for mode selections; Outputs: LED bargraph shows calculations
      8            00 -> AND; 01 -> OR; 10 -> EXOR; 11 -> complement
      9          */
     10          
     11          #include <iom128.h>

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
     12          
     13          union  
     14          {
     15            unsigned char byteimage;
     16            struct bitimage 
     17            {
     18              unsigned char imbit0:1,
     19                            imbit1:1,
     20                            imbit2:1,
     21                            imbit3:1,
     22                            imbit4:1,
     23                            imbit5:1,
     24                            imbit6:1,
     25                            imbit7:1;
     26            } temp;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27          };
   \                     _A_byteimage:
   \   00000000                      DS8 1
     28          

   \                                 In  segment CODE, align 2, keep-with-next
     29          int main(void)
   \                     main:
     30          {
     31            
     32            DDRD = 0x00;                          //setup PORTD as inputs     
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB01               OUT     0x11, R16
     33            PORTD = 0xFF;                         //turn on pull-ups for PORTD
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB02               OUT     0x12, R16
     34            DDRB = 0xFF;                          //setup PORTB as outputs
   \   00000008   EF0F               LDI     R16, 255
   \   0000000A   BB07               OUT     0x17, R16
     35            char temp0;
     36            
     37            while(1)
     38            {
     39              byteimage = PIND;
   \                     ??main_0:
   \   0000000C   B300               IN      R16, 0x10
   \   0000000E   9300....           STS     _A_byteimage, R16
     40              
     41              if(temp.imbit7 == 0 && temp.imbit6 == 0)
   \   00000012   9100....           LDS     R16, _A_byteimage
   \   00000016   7C00               ANDI    R16, 0xC0
   \   00000018   2300               TST     R16
   \   0000001A   F469               BRNE    ??main_1
     42              {
     43                temp0 = byteimage >> 3;
   \   0000001C   9100....           LDS     R16, _A_byteimage
   \   00000020   9506               LSR     R16
   \   00000022   9506               LSR     R16
   \   00000024   9506               LSR     R16
   \   00000026   2F10               MOV     R17, R16
     44                temp0 = byteimage & temp0;
   \   00000028   9100....           LDS     R16, _A_byteimage
   \   0000002C   2310               AND     R17, R16
     45                PORTB = ~temp0;
   \   0000002E   2F01               MOV     R16, R17
   \   00000030   9500               COM     R16
   \   00000032   BB08               OUT     0x18, R16
   \   00000034   CFEB               RJMP    ??main_0
     46              }
     47              else if(temp.imbit7 == 0 && temp.imbit6 == 1)
   \                     ??main_1:
   \   00000036   9100....           LDS     R16, _A_byteimage
   \   0000003A   7C00               ANDI    R16, 0xC0
   \   0000003C   3400               CPI     R16, 64
   \   0000003E   F471               BRNE    ??main_2
     48              {
     49                temp0 = byteimage >> 3;
   \   00000040   9100....           LDS     R16, _A_byteimage
   \   00000044   9506               LSR     R16
   \   00000046   9506               LSR     R16
   \   00000048   9506               LSR     R16
   \   0000004A   2F10               MOV     R17, R16
     50                temp0 = byteimage | temp0;
   \   0000004C   9100....           LDS     R16, _A_byteimage
   \   00000050   2B10               OR      R17, R16
     51                temp0 &= 0x07;
   \   00000052   7017               ANDI    R17, 0x07
     52                PORTB = ~temp0;
   \   00000054   2F01               MOV     R16, R17
   \   00000056   9500               COM     R16
   \   00000058   BB08               OUT     0x18, R16
   \   0000005A   CFD8               RJMP    ??main_0
     53              }
     54              else if(temp.imbit7 == 1 && temp.imbit6 == 0)
   \                     ??main_2:
   \   0000005C   9100....           LDS     R16, _A_byteimage
   \   00000060   7C00               ANDI    R16, 0xC0
   \   00000062   3800               CPI     R16, 128
   \   00000064   F471               BRNE    ??main_3
     55              {
     56                temp0 = byteimage >> 3;
   \   00000066   9100....           LDS     R16, _A_byteimage
   \   0000006A   9506               LSR     R16
   \   0000006C   9506               LSR     R16
   \   0000006E   9506               LSR     R16
   \   00000070   2F10               MOV     R17, R16
     57                temp0 = byteimage ^ temp0;
   \   00000072   9100....           LDS     R16, _A_byteimage
   \   00000076   2710               EOR     R17, R16
     58                temp0 &= 0x07;
   \   00000078   7017               ANDI    R17, 0x07
     59                PORTB = ~temp0;
   \   0000007A   2F01               MOV     R16, R17
   \   0000007C   9500               COM     R16
   \   0000007E   BB08               OUT     0x18, R16
   \   00000080   CFC5               RJMP    ??main_0
     60              }
     61              else
     62              {
     63                byteimage &= 0x07;
   \                     ??main_3:
   \   00000082   9100....           LDS     R16, _A_byteimage
   \   00000086   7007               ANDI    R16, 0x07
   \   00000088   9300....           STS     _A_byteimage, R16
     64                PORTB = ~byteimage;
   \   0000008C   9100....           LDS     R16, _A_byteimage
   \   00000090   9500               COM     R16
   \   00000092   BB08               OUT     0x18, R16
   \   00000094   CFBB               RJMP    ??main_0
   \   00000096                      REQUIRE _A_DDRD
   \   00000096                      REQUIRE _A_PORTD
   \   00000096                      REQUIRE _A_DDRB
   \   00000096                      REQUIRE _A_PIND
   \   00000096                      REQUIRE _A_PORTB
     65              }
     66            }
     67          }

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRB
       1  _A_DDRD
       1  _A_PIND
       1  _A_PORTB
       1  _A_PORTD
       1  _A_byteimage
     150  main
       7  -- Other

 
   5 bytes in segment ABSOLUTE
 150 bytes in segment CODE
   7 bytes in segment INITTAB
   1 byte  in segment NEAR_Z
 
 150 bytes of CODE memory (+ 7 bytes shared)
   1 byte  of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
